--view dataset-- 
SELECT *
FROM CopyofIMDBTop250MoviesCleanedIMDBTop250Movies;

--change table name-- 
ALTER TABLE CopyofIMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO Movies

--top 5 budgeted movies-- 
SELECT name, budget
FROM Movies
ORDER BY budget DESC 
LIMIT 5

--princess mononoke update-- 
UPDATE Movies
SET budget = REPLACE(budget, 2400000000, 23500000)

--3 idiots update-- 
UPDATE Movies
SET budget = REPLACE(budget, 550000000, 6700000)

--UPDATED TOP 5 BUDGETED MOVIES--
SELECT name, budget
FROM Movies
ORDER BY budget DESC 
LIMIT 5

--top 5 movies-- 
SELECT name, rating
FROM Movies
ORDER BY rating DESC 
LIMIT 5

--top 5 box office hits-- 
SELECT name, box_office
FROM Movies
ORDER BY box_office DESC
LIMIT 5

--top 10 highest profit-- 
SELECT name, box_office, budget, (box_office - budget) as profit 
FROM Movies
ORDER BY profit DESC
LIMIT 10

--top 10 lowest profit-- 
SELECT name, box_office, budget, (box_office - budget) as profit 
FROM Movies
ORDER BY profit 
LIMIT 10

--most popular genres-- 
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5


--how many movies in each rating category-- 
SELECT certificate, COUNT(*) as total
FROM Movies 
GROUP BY certificate
ORDER BY total DESC


--top 10 directors-- 
SELECT directors, COUNT(*) AS Number_of_movies
FROM Movies
GROUP BY directors
ORDER BY COUNT(*) DESC
limit 10


--best years for movies-- 
SELECT year, COUNT(year) AS Number_of_Movies_Per_Year
FROM Movies
GROUP BY year
ORDER BY COUNT (year) DESC 
limit 10


--how many movies in each decade-- 
SELECT 
    year/10 * 10 + 1 
    as decade_start,
    year/10 * 10 + 10 
    as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start

--most popular movies genre in each decade-- 
SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start

--most popular movie genre in each decade--
WITH genre_counts 
AS (
  SELECT genre, COUNT(*) 
  AS genre_count, year
  FROM (
    SELECT TRIM(value) 
    AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
                        
  )
  GROUP BY genre, year
), decade_max_genre 
AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) 
  AS rn
  FROM (
    SELECT 
      year/10 * 10 + 1 
    AS decade_start,
      year/10 * 10 + 10 
    AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start
